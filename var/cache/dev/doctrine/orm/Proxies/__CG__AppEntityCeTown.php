<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class CeTown extends \App\Entity\CeTown implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'id', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'townCode', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'townName', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'townRegion', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'townAlias', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'datetime', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'tms', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'fkCeTown'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'id', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'townCode', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'townName', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'townRegion', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'townAlias', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'datetime', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'tms', '' . "\0" . 'App\\Entity\\CeTown' . "\0" . 'fkCeTown'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (CeTown $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getTownCode(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTownCode', []);

        return parent::getTownCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setTownCode(string $townCode): \App\Entity\CeTown
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTownCode', [$townCode]);

        return parent::setTownCode($townCode);
    }

    /**
     * {@inheritDoc}
     */
    public function getTownName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTownName', []);

        return parent::getTownName();
    }

    /**
     * {@inheritDoc}
     */
    public function setTownName(string $townName): \App\Entity\CeTown
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTownName', [$townName]);

        return parent::setTownName($townName);
    }

    /**
     * {@inheritDoc}
     */
    public function getTownRegion(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTownRegion', []);

        return parent::getTownRegion();
    }

    /**
     * {@inheritDoc}
     */
    public function setTownRegion(string $townRegion): \App\Entity\CeTown
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTownRegion', [$townRegion]);

        return parent::setTownRegion($townRegion);
    }

    /**
     * {@inheritDoc}
     */
    public function getTownAlias(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTownAlias', []);

        return parent::getTownAlias();
    }

    /**
     * {@inheritDoc}
     */
    public function setTownAlias(string $townAlias): \App\Entity\CeTown
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTownAlias', [$townAlias]);

        return parent::setTownAlias($townAlias);
    }

    /**
     * {@inheritDoc}
     */
    public function getDatetime(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDatetime', []);

        return parent::getDatetime();
    }

    /**
     * {@inheritDoc}
     */
    public function setDatetime(\DateTimeInterface $datetime): \App\Entity\CeTown
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDatetime', [$datetime]);

        return parent::setDatetime($datetime);
    }

    /**
     * {@inheritDoc}
     */
    public function getTms(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTms', []);

        return parent::getTms();
    }

    /**
     * {@inheritDoc}
     */
    public function setTms(\DateTimeInterface $tms): \App\Entity\CeTown
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTms', [$tms]);

        return parent::setTms($tms);
    }

    /**
     * {@inheritDoc}
     */
    public function getFkCeTown(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFkCeTown', []);

        return parent::getFkCeTown();
    }

    /**
     * {@inheritDoc}
     */
    public function addFkCeTown(\App\Entity\Ceorder $fkCeTown): \App\Entity\CeTown
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addFkCeTown', [$fkCeTown]);

        return parent::addFkCeTown($fkCeTown);
    }

    /**
     * {@inheritDoc}
     */
    public function removeFkCeTown(\App\Entity\Ceorder $fkCeTown): \App\Entity\CeTown
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeFkCeTown', [$fkCeTown]);

        return parent::removeFkCeTown($fkCeTown);
    }

}
