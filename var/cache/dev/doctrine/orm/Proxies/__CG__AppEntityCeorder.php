<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Ceorder extends \App\Entity\Ceorder implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceOrderref', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceAmount', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceOrderCharge', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceOrderTotal', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceMobnum', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceDatec', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceTms', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'orderType', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceCurrency', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceStatus', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceNetwork', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'fkCeCustomer', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'fkCeTown', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceCreatedBy', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceDoneBy'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceOrderref', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceAmount', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceOrderCharge', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceOrderTotal', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceMobnum', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceDatec', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceTms', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'orderType', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceCurrency', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceStatus', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceNetwork', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'fkCeCustomer', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'fkCeTown', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceCreatedBy', '' . "\0" . 'App\\Entity\\Ceorder' . "\0" . 'ceDoneBy'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Ceorder $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getCeOrderref(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeOrderref', []);

        return parent::getCeOrderref();
    }

    /**
     * {@inheritDoc}
     */
    public function setCeOrderref(string $ceOrderref): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCeOrderref', [$ceOrderref]);

        return parent::setCeOrderref($ceOrderref);
    }

    /**
     * {@inheritDoc}
     */
    public function getCeAmount(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeAmount', []);

        return parent::getCeAmount();
    }

    /**
     * {@inheritDoc}
     */
    public function setCeAmount(int $ceAmount): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCeAmount', [$ceAmount]);

        return parent::setCeAmount($ceAmount);
    }

    /**
     * {@inheritDoc}
     */
    public function getCeOrderCharge(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeOrderCharge', []);

        return parent::getCeOrderCharge();
    }

    /**
     * {@inheritDoc}
     */
    public function setCeOrderCharge(int $ceOrderCharge): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCeOrderCharge', [$ceOrderCharge]);

        return parent::setCeOrderCharge($ceOrderCharge);
    }

    /**
     * {@inheritDoc}
     */
    public function getCeOrderTotal(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeOrderTotal', []);

        return parent::getCeOrderTotal();
    }

    /**
     * {@inheritDoc}
     */
    public function setCeOrderTotal(int $ceOrderTotal): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCeOrderTotal', [$ceOrderTotal]);

        return parent::setCeOrderTotal($ceOrderTotal);
    }

    /**
     * {@inheritDoc}
     */
    public function getCeMobnum(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeMobnum', []);

        return parent::getCeMobnum();
    }

    /**
     * {@inheritDoc}
     */
    public function setCeMobnum(string $ceMobnum): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCeMobnum', [$ceMobnum]);

        return parent::setCeMobnum($ceMobnum);
    }

    /**
     * {@inheritDoc}
     */
    public function getCeDatec(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeDatec', []);

        return parent::getCeDatec();
    }

    /**
     * {@inheritDoc}
     */
    public function setCeDatec(\DateTimeInterface $ceDatec): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCeDatec', [$ceDatec]);

        return parent::setCeDatec($ceDatec);
    }

    /**
     * {@inheritDoc}
     */
    public function getCeTms(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeTms', []);

        return parent::getCeTms();
    }

    /**
     * {@inheritDoc}
     */
    public function setCeTms(\DateTimeInterface $ceTms): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCeTms', [$ceTms]);

        return parent::setCeTms($ceTms);
    }

    /**
     * {@inheritDoc}
     */
    public function getOrderType(): ?\App\Entity\OrderType
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOrderType', []);

        return parent::getOrderType();
    }

    /**
     * {@inheritDoc}
     */
    public function setOrderType(?\App\Entity\OrderType $orderType): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setOrderType', [$orderType]);

        return parent::setOrderType($orderType);
    }

    /**
     * {@inheritDoc}
     */
    public function getCeCurrency(): ?\App\Entity\CeCurrency
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeCurrency', []);

        return parent::getCeCurrency();
    }

    /**
     * {@inheritDoc}
     */
    public function setCeCurrency(?\App\Entity\CeCurrency $ceCurrency): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCeCurrency', [$ceCurrency]);

        return parent::setCeCurrency($ceCurrency);
    }

    /**
     * {@inheritDoc}
     */
    public function getCeStatus(): ?\App\Entity\CeStatus
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeStatus', []);

        return parent::getCeStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setCeStatus(?\App\Entity\CeStatus $ceStatus): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCeStatus', [$ceStatus]);

        return parent::setCeStatus($ceStatus);
    }

    /**
     * {@inheritDoc}
     */
    public function getCeNetwork(): ?\App\Entity\CeNetwork
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeNetwork', []);

        return parent::getCeNetwork();
    }

    /**
     * {@inheritDoc}
     */
    public function setCeNetwork(?\App\Entity\CeNetwork $ceNetwork): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCeNetwork', [$ceNetwork]);

        return parent::setCeNetwork($ceNetwork);
    }

    /**
     * {@inheritDoc}
     */
    public function getFkCeCustomer(): ?\App\Entity\CeCustomer
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFkCeCustomer', []);

        return parent::getFkCeCustomer();
    }

    /**
     * {@inheritDoc}
     */
    public function setFkCeCustomer(?\App\Entity\CeCustomer $fkCeCustomer): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFkCeCustomer', [$fkCeCustomer]);

        return parent::setFkCeCustomer($fkCeCustomer);
    }

    /**
     * {@inheritDoc}
     */
    public function getFkCeTown(): ?\App\Entity\CeTown
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFkCeTown', []);

        return parent::getFkCeTown();
    }

    /**
     * {@inheritDoc}
     */
    public function setFkCeTown(?\App\Entity\CeTown $fkCeTown): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFkCeTown', [$fkCeTown]);

        return parent::setFkCeTown($fkCeTown);
    }

    /**
     * {@inheritDoc}
     */
    public function getCeCreatedBy(): ?\App\Entity\CeUser
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeCreatedBy', []);

        return parent::getCeCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setCeCreatedBy(?\App\Entity\CeUser $ceCreatedBy): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCeCreatedBy', [$ceCreatedBy]);

        return parent::setCeCreatedBy($ceCreatedBy);
    }

    /**
     * {@inheritDoc}
     */
    public function getCeDoneBy(): ?\App\Entity\CeUser
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCeDoneBy', []);

        return parent::getCeDoneBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setCeDoneBy(?\App\Entity\CeUser $ceDoneBy): \App\Entity\Ceorder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCeDoneBy', [$ceDoneBy]);

        return parent::setCeDoneBy($ceDoneBy);
    }

}
