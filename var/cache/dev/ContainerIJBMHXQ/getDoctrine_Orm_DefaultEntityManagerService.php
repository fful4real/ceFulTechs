<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'doctrine.orm.default_entity_manager' shared service.

include_once $this->targetDirs[3].'\\vendor\\doctrine\\persistence\\lib\\Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\persistence\\lib\\Doctrine\\Common\\Persistence\\Mapping\\Driver\\AnnotationDriver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\persistence\\lib\\Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\NamingStrategy.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\QuoteStrategy.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Mapping\\EntityListenerResolver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle\\Mapping\\EntityListenerServiceResolver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle\\Mapping\\ContainerAwareEntityListenerResolver.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Repository\\RepositoryFactory.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle\\Repository\\ContainerRepositoryFactory.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\dbal\\lib\\Doctrine\\DBAL\\Configuration.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\Configuration.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle\\ManagerConfigurator.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\persistence\\lib\\Doctrine\\Common\\Persistence\\ObjectManager.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\EntityManagerInterface.php';
include_once $this->targetDirs[3].'\\vendor\\doctrine\\orm\\lib\\Doctrine\\ORM\\EntityManager.php';

$a = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();
$a->addDriver(new \Doctrine\ORM\Mapping\Driver\AnnotationDriver(($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService()), array(0 => ($this->targetDirs[3].'\\src\\Entity'))), 'App\\Entity');

$b = new \Doctrine\ORM\Configuration();
$b->setEntityNamespaces(array('App' => 'App\\Entity'));
$b->setMetadataCacheImpl(($this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache'] ?? $this->load('getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService.php')));
$b->setQueryCacheImpl(($this->services['doctrine_cache.providers.doctrine.orm.default_query_cache'] ?? $this->load('getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService.php')));
$b->setResultCacheImpl(($this->services['doctrine_cache.providers.doctrine.orm.default_result_cache'] ?? $this->load('getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService.php')));
$b->setMetadataDriverImpl($a);
$b->setProxyDir(($this->targetDirs[0].'/doctrine/orm/Proxies'));
$b->setProxyNamespace('Proxies');
$b->setAutoGenerateProxyClasses(true);
$b->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
$b->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
$b->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy());
$b->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
$b->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver($this));
$b->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\ServiceLocator(array('App\\Repository\\CeAccountEntryRepository' => function () {
    return ($this->privates['App\Repository\CeAccountEntryRepository'] ?? $this->load('getCeAccountEntryRepositoryService.php'));
}, 'App\\Repository\\CeAccountRepository' => function () {
    return ($this->privates['App\Repository\CeAccountRepository'] ?? $this->load('getCeAccountRepositoryService.php'));
}, 'App\\Repository\\CeAccountTypeRepository' => function () {
    return ($this->privates['App\Repository\CeAccountTypeRepository'] ?? $this->load('getCeAccountTypeRepositoryService.php'));
}, 'App\\Repository\\CeBankRepository' => function () {
    return ($this->privates['App\Repository\CeBankRepository'] ?? $this->load('getCeBankRepositoryService.php'));
}, 'App\\Repository\\CeBankTypeRepository' => function () {
    return ($this->privates['App\Repository\CeBankTypeRepository'] ?? $this->load('getCeBankTypeRepositoryService.php'));
}, 'App\\Repository\\CeChargeRepository' => function () {
    return ($this->privates['App\Repository\CeChargeRepository'] ?? $this->load('getCeChargeRepositoryService.php'));
}, 'App\\Repository\\CeCurrencyRepository' => function () {
    return ($this->privates['App\Repository\CeCurrencyRepository'] ?? $this->load('getCeCurrencyRepositoryService.php'));
}, 'App\\Repository\\CeCustomerRepository' => function () {
    return ($this->privates['App\Repository\CeCustomerRepository'] ?? $this->load('getCeCustomerRepositoryService.php'));
}, 'App\\Repository\\CeNetworkRepository' => function () {
    return ($this->privates['App\Repository\CeNetworkRepository'] ?? $this->load('getCeNetworkRepositoryService.php'));
}, 'App\\Repository\\CeStatusRepository' => function () {
    return ($this->privates['App\Repository\CeStatusRepository'] ?? $this->load('getCeStatusRepositoryService.php'));
}, 'App\\Repository\\CeTownRepository' => function () {
    return ($this->privates['App\Repository\CeTownRepository'] ?? $this->load('getCeTownRepositoryService.php'));
}, 'App\\Repository\\CeUserRepository' => function () {
    return ($this->privates['App\Repository\CeUserRepository'] ?? $this->load('getCeUserRepositoryService.php'));
}, 'App\\Repository\\CeorderRepository' => function () {
    return ($this->privates['App\Repository\CeorderRepository'] ?? $this->load('getCeorderRepositoryService.php'));
}, 'App\\Repository\\OrderTypeRepository' => function () {
    return ($this->privates['App\Repository\OrderTypeRepository'] ?? $this->load('getOrderTypeRepositoryService.php'));
}))));

$this->services['doctrine.orm.default_entity_manager'] = $instance = \Doctrine\ORM\EntityManager::create(($this->services['doctrine.dbal.default_connection'] ?? $this->load('getDoctrine_Dbal_DefaultConnectionService.php')), $b);

(new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator(array(), array()))->configure($instance);

return $instance;
